import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
from datetime import datetime, timedelta

# ----------------------------------
# LOAD DATA
# ----------------------------------
@st.cache_data
def load_data():
    # Replace with your actual data paths or Google Drive paths
    trade_history = pd.read_excel("Trade history.xlsx")
    inv_reports = pd.read_csv("stock_investment_reports.csv")
    recs = pd.read_csv("recommendations.csv")

    # Clean and merge
    merged = inv_reports.merge(recs, on="Symbol", how="left")
    merged["Weight"] = merged["Weight"].fillna(0)
    return trade_history, merged, recs

trade_history, merged, recs = load_data()

# ----------------------------------
# PAGE SETUP
# ----------------------------------
st.set_page_config(
    page_title="GPT Hedge Fund Dashboard",
    page_icon="üìà",
    layout="wide"
)

st.title("ü§ñ GPT Hedge Fund Performance Dashboard")
st.markdown(
    """
    *Built by Ryan Chrostowski ‚Äî Lehigh FinTech Fund Project*  
    ---
    This dashboard tracks **daily alpha**, portfolio composition, and investment reports
    generated by your GPT-driven hedge fund.
    """
)

# ----------------------------------
# METRICS SECTION
# ----------------------------------
col1, col2, col3, col4 = st.columns(4)

alpha_daily = 0.005  # replace with your tracked alpha
alpha_cum = (1 + alpha_daily)**60 - 1  # approx 2 months
benchmark_ret = 0.02
fund_ret = (1 + benchmark_ret) * (1 + alpha_cum) - 1
sharpe = (alpha_daily * 252) / 0.05  # assume 5% daily vol

col1.metric("Daily Alpha", f"{alpha_daily*100:.2f}%")
col2.metric("Cumulative Alpha (2 mo)", f"{alpha_cum*100:.1f}%")
col3.metric("Fund Return", f"{fund_ret*100:.1f}%")
col4.metric("Sharpe Ratio (Est.)", f"{sharpe:.2f}")

# ----------------------------------
# PERFORMANCE CHART
# ----------------------------------
st.subheader("üìä Performance Over Time")

if "Date" in trade_history.columns and "PortfolioValue" in trade_history.columns:
    fig = px.line(
        trade_history,
        x="Date",
        y="PortfolioValue",
        title="Portfolio Value Over Time",
        template="plotly_white"
    )
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("Upload your trade history file with `Date` and `PortfolioValue` columns to see performance.")

# ----------------------------------
# PORTFOLIO ALLOCATION
# ----------------------------------
st.subheader("üíº Current Portfolio Weights")

fig_pie = px.pie(
    recs,
    names="Symbol",
    values="Weight",
    title="Portfolio Weight Distribution",
    hole=0.4
)
st.plotly_chart(fig_pie, use_container_width=True)

# ----------------------------------
# TOP HOLDINGS
# ----------------------------------
st.subheader("üèÜ Top AI-Selected Holdings")

top_df = merged.sort_values("InvScore", ascending=False).head(10)
st.dataframe(
    top_df[["Symbol", "InvScore", "Weight", "InvReport"]].style.background_gradient(
        subset=["InvScore"], cmap="Greens"
    ),
    use_container_width=True,
    height=400
)

# ----------------------------------
# INDIVIDUAL REPORT VIEWER
# ----------------------------------
st.subheader("üìë Individual Investment Reports")

selected_symbol = st.selectbox("Choose a Stock", merged["Symbol"].unique())
selected_report = merged.loc[merged["Symbol"] == selected_symbol, "InvReport"].iloc[0]

st.markdown(f"### {selected_symbol} Investment Report")
st.write(selected_report)

# ----------------------------------
# MACRO SECTION (Optional Placeholder)
# ----------------------------------
st.subheader("üåé Macro & Outlook Summary")

macro_text = """
The fund currently operates in a macro environment characterized by:
- Resilient GDP growth
- Moderating inflation pressures
- Stable unemployment levels
- Anticipation of potential Fed rate cuts in mid-2025

Volatility remains contained, and leading indicators suggest a supportive backdrop for risk assets.
"""
st.info(macro_text)

# ----------------------------------
# FOOTER
# ----------------------------------
st.markdown("---")
st.caption("¬© 2025 GPT Hedge Fund ‚Äì Built with Streamlit and Google Gemini APIs.")
